#!/usr/bin/python

from classes import *
from initroutines import *
import sys

master_inits = {
	1: [lcd_init_1],
	2: [lcd_init_2],
	3: [lcd_init_3,delay_master(100),lcd_init_3],
	4: [lcd_init_4],
	5: [lcd_init_5],
	6: [lcd_init_6],
	7: [lcd_init_7],
	8: [lcd_init_8,delay_master(100),lcd_init_8],
	9: [lcd_init_9],
	10: [lcd_init_10],
	11: [lcd_init_11],
	12: [lcd_init_12],
	13: [lcd_init_13],
	14: [lcd_init_14],
	15: [lcd_init_15,lcd_init_15],
	16: [lcd_init_16,delay_master(100),lcd_init_16],
	17: [lcd_init_17],
	18: [lcd_init_18],
	19: [lcd_init_19],
	20: [lcd_init_20],
	21: [lcd_init_21],
	22: [lcd_init_22],
	23: [lcd_init_23],
	24: [lcd_init_24],
	25: [lcd_init_25],
	26: [lcd_init_26_29],
	27: [lcd_init_27_31],
	29: [lcd_init_26_29],
	30: [lcd_init_30],
	31: [lcd_init_27_31],
	32: [lcd_init_32],
	33: [lcd_init_33],
	34: [lcd_init_34],
	35: [lcd_init_35],
	36: [lcd_init_36],
	37: [lcd_init_37],
	38: [lcd_init_38],
	39: [lcd_init_39],
	40: [lcd_init_40],
	None: [lcd_init_default]
}

lcd_type_list = [s for s in master_inits.keys() if s is not None ]
lcd_type_list.sort()

all_init_functions = []
for t in lcd_type_list+[None]:
	for i in master_inits[t]:
		if isinstance(i,InitFunction) and i not in all_init_functions:
			all_init_functions.append(i)

def make_c():
	s = "// This file is automatically generated\n"
	s += '#include "initlib.h"\n'
	for f in all_init_functions:
		s += f.body_c()
		s += "\n"
	s += "void master_lcd_init(int type)\n{\n"
	s += "\tswitch(type) {\n"
	for k in lcd_type_list+[None]:
		if k is None:
			s += "\t\tdefault:\n"
		else:
			s += "\t\tcase %d:\n"%k
		s += ''.join(['\t\t\t%s\n'%s.to_c() for s in master_inits[k]])
		s += '\t\t\tbreak;\n'
	s += "\t}\n"
	s += "}\n\n"
	return s

def make_python():
	s = "# This file is automatically generated\n"
	s += 'from initlib import *\n'
	for f in all_init_functions:
		s += f.body_python()
		s += "\n"
	s += "def master_lcd_init(t):\n"
	el = ""
	for k in lcd_type_list+[None]:
		if k is not None:
			s += "\t%sif t == %d:\n"%(el,k)
			el = "el"
		else:
			s += "\telse:\n"
		s += ''.join(['\t\t%s\n'%s.to_python() for s in master_inits[k]])
	s += "\n\n"
	return s

if __name__ == "__main__":
	if sys.argv[1].lower() == 'c':
		sys.stdout.write(make_c())
	elif sys.argv[1].lower() == 'python':
		sys.stdout.write(make_python())

